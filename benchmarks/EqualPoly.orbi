%% Syntax
tp: type.
arr: tp -> tp -> tp.
all: (tp -> tp) -> tp.

tm: type.
app: tm -> tm -> tm.
lam: (tm -> tm) -> tm.
tapp: tm -> tp -> tm.
tlam: (tp -> tm) -> tm.

%% Judgments
atp: tp -> tp -> type.  
aeq: tm -> tm -> type.

%% Rules
at_al: ({a:tp} atp a a -> atp (T a) (S a)) 
        -> atp (all (\a. T a) (all (\a. S a)).
at_a: atp T1 T2 -> atp S1 S2 -> atp (arr T1 S1) (arr T2 S2).
ae_l: ({x:tm} aeq x x -> aeq (M x) (N x)) 
        -> aeq (lam (\x. M x)) (lam (\x. N x)).
ae_a: aeq M1 N1 -> aeq M2 N2 -> aeq (app M1 M2) (app N1 N2).
ae_tl: ({a:tp} atp a a -> aeq (M a) (N a)) 
        -> aeq (tlam (\a. M a)) (tlam (\a. N a)).
ae_ta: aeq M N -> atp T S -> aeq (tapp M T) (tapp N S).

%% Schemas
schema aG: block (a:tp).
schema axG: block (a:tp) + block (x:tm).
schema atpG: block (a:tp; u:atp a a).
schema aeqG: block (a:tp; u:atp a a) + block (x:tm; v:aeq x x).

%% Definitions
inductive atpR: {G:aG} {H:atpG} prop =
| atp_nil: atpR nil nil
| atp_cons : atpR G H -> atpR (G, block a:tp) (H, block a:tp; u:atp a a).

inductive aeqR: {G:axG} {H:aeqG} prop =
| aeq_nil: aeqR nil nil
| aeq_cons1 : aeqR G H -> aeqR (G, block a:tp) (H, block a:tp; u:atp a a)
| aeq_cons2 : aeqR G H -> aeqR (G, block x:tm) (H, block x:tm; u:aeq x x).

%% Theorems

theorem reflTpG: {H:atpG} {A:tp} [H |- atp A A].
theorem reflTmG: {H:aeqG} {M:tm} [H |- aeq M M].

theorem reflTpR: {G:aG} {H:atpG} {A:tp} atpR G H -> [H |- atp A A].
theorem reflTmR: {G:axG} {H:aeqG} {M:tm} aeqR G H -> [H |- aeq M M].

%% Directives
% [hy,ab] wf tp.
% [hy,ab] wf tm.
% [hy,ab] explicit a in aG.
% [hy,ab] explicit a in axG.
% [hy,ab] explicit x in axG.
% [hy,ab] explicit a in atpG.
% [hy,ab] explicit a in aeqG.
% [hy,ab] explicit x in aeqG.
% [hy,ab] explicit a in G in atpR.
% [hy,ab] explicit a in G in aeqR.
% [hy,ab] explicit x in G in aeqR.
