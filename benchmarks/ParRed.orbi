%% Syntax
tp: type.
i: tp.
arr: tp -> tp -> tp.

tm: type.
app: tm -> tm -> tm.
lam: (tm -> tm) -> tm.

%% Judgments
oft: tm -> tp -> type.
pr: tm -> tm -> type.

%% Rules
oft_l: ({x:tm} oft x A -> oft (M x) B) ->
       oft (lam (\x. M x)) (arr A B).
oft_a: oft M (arr A B) -> oft N A -> oft (app M N) B.

pr_l: ({x:tm} pr x x -> pr (M x) (N x)) 
       -> pr (lam (\x. M x)) (lam (\x. N x)).
pr_b: ({x:tm} pr x x -> pr (M1 x) (M2 x)) ->
         pr N1 N2 -> pr (app (lam (\x. M1 x)) N1) (M2 N2).
pr_a: pr M1 M2 -> pr N1 N2 -> pr (app M1 N1) (app M2 N2).

%% Schemas
schema xtG = some [t:tp] block (x:tm, u:oft x t);
schema xrG = block (x:tm, u:pr x x);
schema xrtG =  some [t:tp] block x:tm, of_v: oft x t, pr_v: pr x x;

%% Definitions
inductive Rxrt: {g:xrG} {h:xtG} prop =
| Rxrt_nil : Rxrt [] []
| Rxrt_cons:  Rxrt [g] [h] ->
            Rxrt [g,b: block x:tm, u:pr x x] [h, b:block x:tm, v:oft x A];

%% Theorems
%{
theorem substG: {M:tm->tm}{N:tm}{A:tp}{B:tp}{h:xtG}
  [h, block x:tm, oft x A |- oft (M x) B] -> [h |- oft N A] ->
  [h |- oft (M N) B].
theorem typePresG: {h:xrtG}
  [g |- pr M N] -> [g |- oft M A] -> [g |- oft N A].
theorem typePresR: {g:xrG}{h:xtG}
  Rxrt g h -> [g |- pr M N] -> [h |- oft M A] -> [h |- oft N A].
}%
