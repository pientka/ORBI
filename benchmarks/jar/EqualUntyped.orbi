%% Syntax
tm: type.
app: tm -> tm -> tm.
lam: (tm -> tm) -> tm.

%% Judgments
aeq: tm -> tm -> type.
deq: tm -> tm -> type.

%% Rules
ae_a: aeq M1 N1 -> aeq M2 N2 -> aeq (app M1 M2) (app N1 N2).
ae_l: ({x:tm} aeq x x -> aeq (M x) (N x))
          -> aeq (lam (\x. M x)) (lam (\x. N x)).

de_a: deq M1 N1 -> deq M2 N2 -> deq (app M1 M2) (app N1 N2).
de_l: ({x:tm} deq x x -> deq (M x) (N x))
        -> deq (lam (\x. M x)) (lam (\x. N x)).
de_r: {M:tm} deq M M.
de_s: deq M1 M2 -> deq M2 M1.
de_t: deq M1 M2 -> deq M2 M3 -> deq M1 M3.

%% Schemas
schema xG = block (x:tm);
schema xaG = block (x:tm, u:aeq x x);
schema xdG = block (x:tm, u:deq x x);
schema daG = block (x:tm, u:deq x x, v:aeq x x);


%% Definitions
inductive Rxa: {g:xG} {h:xaG} prop =
| Rxa_nil: Rxa [] []
| Rxa_cons: Rxa [g] [h] -> Rxa [g, b:block (x:tm)] [h, b:block (x:tm, u:aeq x x)];


inductive Rda: {g:xaG} {h:xdG} prop =
| Rda_nil: Rda [] []
| Rda_cons: Rda [g] [h] -> Rda [g, b:block (x:tm, v:aeq x x)] [h, b:block (x:tm, u:deq x x)];


%% Theorems
%{
theorem reflG: {H:xaG} {M:tm} [H |- aeq M M].
theorem symG: {H:xaG}{M:tm}{N:tm} [H |- aeq M N] -> [H |- aeq N M].
theorem transG: {H:xaG}{M:tm}{N:tm}{L:tm}
              [H |- aeq M N] & [H |- aeq N L] -> [H |- aeq M L].
theorem ceqG: {G:daG} [G |- deq M N] -> [G |- aeq M N].
theorem substG: {H:xaG}{M1:tm->tm}{M2:tm}{N1:tm}{N2:tm}
  [H, block x:tm; aeq x x |- aeq (M1 x) (M2 x)] & [H |- aeq N1 N2] ->
  [H |- aeq (M1 N1) (M2 N2)].

theorem reflR : {G:xG}{H:xaG}{M:tm} xaR G H -> [H |- aeq M M].
theorem ceqR: {G:xdG}{H:xaG} daR G H -> [G |- deq M N] -> [H |- aeq M N].
}%
%% Directives
% [hy,ab] wf tm.
% [hy,ab] explicit x in de_l.
% [hy,ab] explicit M in de_r.
% [hy,ab] explicit x in xG.
% [hy,ab] explicit x in xdG.
% [hy,ab] explicit x in daG.
% [hy,ab] explicit x in G in xaR.
% [hy,ab] explicit x in G in daR.
