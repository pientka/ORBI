% Beluga Development
% Author: Brigitte Pientka
%{ Content:

   - Definition for aeq extended to polymorphic lambda-calculus
   - Definition for deq extended to polymorphic lambda-calculus
   - Meta-theoretic properties: 
     (Solved with a hierarchy of generalized context)
      o Admissibility of Reflexivity 
      o Admissibility of Transitivity
      o Admissibility of Symmertry
      o Soundness
      o Completeness

   Remark: order in the context schema matters.
}%
tp  : type.  %name tp T a.
arr : tp -> tp -> tp.
all : (tp -> tp) -> tp. 

term: type.    %name term M x.
app : term -> term -> term.
lam : (term -> term) -> term.
tlam: (tp  -> term) -> term.
tapp: term -> tp -> term.

% ----------------------------------------------------------------- %
% Algorithmic Equality for types
atp: tp -> tp -> type.   %name atp Q u.
at_al : ({a:tp} atp a a -> atp (T a) (S a))
	-> atp (all T) (all S).
at_arr: atp T1 T2 -> atp S1 S2
	-> atp (arr T1 S1) (arr T2 S2).

% Algorithmic Equality for terms
aeq: term -> term -> type.   %name aeq D u.
ae_a : aeq M1 N1 -> aeq M2 N2 
    -> aeq (app M1 M2) (app N1 N2).
ae_l :  ({x:term} aeq x x -> aeq (M x) (N x)) 
        -> aeq (lam (\x. M x)) (lam (\x. N x)).
ae_tl:  ({a:tp} atp a a -> aeq (M a) (N a)) 
        -> aeq (tlam (\a. M a)) (tlam (\a. N a)).
ae_ta : aeq M N -> atp T S 
    -> aeq (tapp M T) (tapp N S).

% ----------------------------------------------------------------- %
% Declarative Equality for types
dtp: tp -> tp -> type.   %name atp P u.
dt_al : ({a:tp}dtp a a -> dtp (T a) (S a))
	-> dtp (all T) (all S).
dt_arr: dtp T1 T2 -> dtp S1 S2
	-> dtp (arr T1 S1) (arr T2 S2).
dt_r: dtp T T.
dt_t: dtp T R -> dtp R S 
     -> dtp T S.
dt_s: dtp T S -> dtp S T.

% Declarative Equality for terms
deq: term -> term -> type.
de_l: ({x:term} deq x x -> deq (M x) (N x)) 
     -> deq (lam (\x. M x)) (lam (\x. N x)).
de_a: deq M1 N1 -> deq M2 N2  
     -> deq (app M1 M2) (app N1 N2).
de_tl:  ({a:tp} dtp a a -> deq (M a) (N a)) 
        -> deq (tlam (\a. M a)) (tlam (\a. N a)).
de_ta : deq M N -> dtp T S 
    -> deq (tapp M T) (tapp N S).
de_r: deq M M.
de_t: deq M L -> deq L N 
     -> deq M N.
de_s: deq T S -> deq S T.

% ----------------------------------------------------------------- %
% Context declarations
schema atpCtx  = block a:tp , _t:atp a a;
schema aeqCtx  = block (x:term, _u:aeq x x) + block (a:tp , _t:atp a a);

schema dtpCtx = block a: tp, u:atp a a , _t:dtp a a ; 
schema deqCtx =  block x: term, u:aeq x x , _t:deq x x  
  	       + block a: tp, u:atp a a , _t:dtp a a ; 

% ----------------------------------------------------------------- %
% Admissibility of Reflexivity
rec reftp : {g:atpCtx} {T:[g. tp]} [g. atp (T ..) (T ..)] =
mlam g => mlam T => case [g. (T ..)] of
| [g. #p.1 ..] => [g. #p.2 ..]

| [g. all \x. T .. x] =>
  let [g,b:block a:tp , _t:atp a a. D .. b.1 b.2] = 
         reftp [g, b:block a:tp , _t:atp a a] [g, b. T .. b.1]
  in
   [g. at_al \x. \w. D .. x w]  

| [g. arr (T ..) (S ..)] =>
  let [g. D1 ..] = reftp [g] [g . T .. ] in
  let [g. D2 ..] = reftp [g] [g . S .. ] in
    [g. at_arr (D1 ..) (D2 ..)]
;


rec ref : {g:aeqCtx} {M:[g. term]} [g. aeq (M ..) (M ..)] =
mlam g => mlam M => case [g. (M ..)] of
| [g. #p.1 ..] => [g. #p.2 ..]

| [g. lam \x. M .. x] =>
  let [g,b:block y:term , _t:aeq y y. D .. b.1 b.2] = 
         ref [g, b:block y:term , _t:aeq y y] [g, b. M .. b.1]
  in
   [g. ae_l \x. \w. (D .. x w)]  

| [g. app (M1 ..) (M2 ..)] =>
  let [g. D1 ..] = ref [g] [g . M1 .. ] in
  let [g. D2 ..] = ref [g] [g . M2 .. ] in
    [g. ae_a (D1 ..) (D2 ..)]

| [g. tlam \a. M .. a] =>
  let [g,b:block a:tp , _t:atp a a. D .. b.1 b.2] = 
         ref [g, b:block a:tp , _t:atp a a] [g, b. M .. b.1]
  in
   [g. ae_tl \x. \w. (D .. x w)]  

| [g. tapp (M ..) (T ..)] =>
  let [g. D1 ..] = ref [g] [g . M .. ] in
  let [g. D2 ..] = reftp [g] [g . T .. ] in
    [g. ae_ta (D1 ..) (D2 ..)]
;

% ----------------------------------------------------------------- %
% General transitivity is admissible
rec transtp: (g:atpCtx) 
   [g. atp (T ..) (R ..)] -> [g. atp (R ..) (S ..)] 
 -> [g. atp (T ..) (S ..)] =
fn ae1 => fn ae2 => case ae1 of
| [g. #p.2 ..] => ae2

| [g. at_al \a.\u. D1 .. a u] =>
  let [g. at_al \a.\u. D2 .. a u] =  ae2  in	
  let [g, b:block a:tp , _t:atp a a. D .. b.1 b.2] = 
         transtp [g, b:block a:tp , _t:atp a a. D1 .. b.1 b.2]
               [g, b. D2 .. b.1 b.2]
  in
    [g. at_al \a. \u. D .. a u]
       
| [g. at_arr (D1 ..) (D2 ..)] =>
  let [g. at_arr (D3 ..) (D4 ..)] = ae2 in 
  let [g. D ..]  = transtp [g. D1 ..]  [g. D3 ..] in
  let [g. D' ..] = transtp [g. D2 ..]  [g. D4 ..] in
    [g. at_arr  (D ..)  (D' ..)]
;


rec trans: (g:aeqCtx) 
   [g. aeq (T ..) (R ..)] -> [g. aeq (R ..) (S ..)] 
 -> [g. aeq (T ..) (S ..)] =
fn ae1 => fn ae2 => case ae1 of
| [g. #p.2 ..] => ae2

| [g. ae_l \x.\u. D1 .. x u] =>
  let [g. ae_l \x.\u. D2 .. x u] =  ae2  in	
  let [g, b:block x:term , _t:aeq x x. D .. b.1 b.2] = 
         trans [g, b:block x':term , _t:aeq x' x'. D1 .. b.1 b.2]
               [g, b. D2 .. b.1 b.2]
  in
    [g. ae_l \x. \u. D .. x u]
       
| [g. ae_a (D1 ..) (D2 ..)] =>
  let [g. ae_a (D3 ..) (D4 ..)] = ae2 in 
  let [g. D ..] = trans [g. D1 ..]  [g. D3 ..] in
  let [g. D' ..] = trans [g. D2 ..]  [g. D4 ..] in
    [g. ae_a  (D ..)  (D' ..)]

| [g. ae_tl \a.\u. D1 .. a u] =>
  let [g. ae_tl \a.\u. D2 .. a u] =  ae2  in	
  let [g, b:block a:tp , _t:atp a a. D .. b.1 b.2] = 
         trans [g, b:block a:tp , _t:atp a a. D1 .. b.1 b.2]
               [g, b. D2 .. b.1 b.2]
  in
    [g. ae_tl \x. \u. D .. x u]
       
| [g. ae_ta (D1 ..) (Q1 ..)] =>
  let [g. ae_ta (D2 ..) (Q2 ..)] = ae2 in 
  let [g. D ..] = trans [g. D1 ..]  [g. D2 ..] in
  let [g. Q ..] = transtp [g. Q1 ..]  [g. Q2 ..] in
    [g. ae_ta  (D ..)  (Q ..)]
;

% ----------------------------------------------------------------- %
% General symmetry is admissible
rec symtp: (g:atpCtx)
 [g. atp (T ..) (R ..)] -> [g. atp (R ..) (T ..)] = 
fn ae => case ae of
| [g. #p.2 ..] => ae
| [g. at_al \x.\u. D .. x u] => 
  let [g, b:block a:tp , _t:atp a a. D' .. b.1 b.2] = 
      symtp [g, b:block a:tp, _t:atp a a. D .. b.1 b.2]  in 
  [g. at_al \x.\u. D' .. x u]
| [g. at_arr (D1 ..) (D2 ..)] =>
  let [g. D1' ..] = symtp [g. D1 ..] in 
  let [g. D2' ..] = symtp [g. D2 ..] in 
    [g. at_arr (D1' ..) (D2' ..)]
 ;

rec sym: (g:aeqCtx)
 [g. aeq (T ..) (R ..)] -> [g. aeq (R ..) (T ..)] = 
fn ae => case ae of
| [g. #p.2 ..] => ae
| [g. ae_l \x.\u. D .. x u] => 
  let [g, b:block x:term , _t:aeq x x. D' .. b.1 b.2] = 
      sym [g, b:block x:term, _t:aeq x x. D .. b.1 b.2]  in 
  [g. ae_l \x.\u. D' .. x u]
| [g. ae_a (D1 ..) (D2 ..)] =>
  let [g. D1' ..] = sym [g. D1 ..] in 
  let [g. D2' ..] = sym [g. D2 ..] in 
    [g. ae_a (D1' ..) (D2' ..)]
| [g. ae_tl \x.\u. D .. x u] => 
  let [g, b:block a:tp , _t:atp a a. D' .. b.1 b.2] = 
      sym [g, b:block a:tp, _t:atp a a. D .. b.1 b.2]  in 
  [g. ae_tl \x.\u. D' .. x u]
| [g. ae_ta (D ..) (Q ..)] =>
  let [g. D' ..] = sym [g. D ..] in 
  let [g. Q' ..] = symtp [g. Q ..] in 
    [g. ae_ta (D' ..) (Q' ..)]
;

% ----------------------------------------------------------------- %
% Completeness
rec ctp: (g:dtpCtx)
         [g. dtp (T ..) (S ..)] -> [g. atp (T ..) (S ..)]  =
fn e => case e of 
| [g. #p.3 ..] => [g. #p.2 ..]
| [g. dt_r] => reftp [g] [g . _  ]   
| [g. dt_arr (F1 ..) (F2 ..)] => 
  let [g. D1 ..] = ctp [g. F1 ..] in 
  let [g. D2 ..] = ctp [g. F2 ..] in 
    [g. at_arr (D1 ..) (D2 ..)]
					
| [g. dt_al (\x.\u. F .. x u)] => 
  let [g,b:block a:tp,u:atp a a , _t:dtp a a. D .. b.1 b.2] = 
        ctp [g, b:block a:tp, u:atp a a , _t:dtp a a. F .. b.1 b.3]
  in
     [g. at_al (\x.\v. D .. x v)]

 | [g. dt_t (F1 ..) (F2 ..)] => 
  let [g. D2 ..] = ctp [g. F2 ..] in 
  let [g. D1 ..] = ctp [g. F1 ..] in 
    transtp [g. D1 ..]  [g. D2 ..]           
| [g.dt_s (F ..)] => 
  let [g.D ..] = ctp [g.F ..] in 
     symtp [g.D ..]
;

rec ceq: (g:deqCtx)
         [g. deq (T ..) (S ..)] -> [g. aeq (T ..) (S ..)]  =
fn e => case e of 
| [g. #p.3 ..] => [g. #p.2 ..]
| [g. de_r] => ref [g] [g . _  ]   
| [g. de_a (F1 ..) (F2 ..)] => 
  let [g. D1 ..] = ceq [g. F1 ..] in 
  let [g. D2 ..] = ceq [g. F2 ..] in 
    [g. ae_a (D1 ..) (D2 ..)]
					
| [g. de_l (\x.\u. F .. x u)] => 
  let [g,b:block x:term,u:aeq x x , _t:deq x x. D .. b.1 b.2] = 
        ceq [g, b:block x:term, u:aeq x x , _t:deq x x. F .. b.1 b.3]
  in
     [g. ae_l (\x.\v. D .. x v)]

 | [g. de_t (F1 ..) (F2 ..)] => 
  let [g. D2 ..] = ceq [g. F2 ..] in 
  let [g. D1 ..] = ceq [g. F1 ..] in 
    trans [g. D1 ..]  [g. D2 ..]           

| [g.de_s (F ..)] => 
   let [g.D ..] = ceq [g.F..] in 
   sym [g.D ..]

| [g. de_tl (\a.\u. F .. a u)] => 
  let [g,b:block a:tp,u:atp a a , _t:dtp a a. D .. b.1 b.2] = 
        ceq [g, b:block a:tp, u: atp a a , _t:dtp a a. F .. b.1 b.3]
  in
     [g. ae_tl (\x.\v. D .. x v)]

 | [g. de_ta (F1 ..) (P2 ..)] => 
  let [g. Q2 ..] = ctp [g. P2 ..] in 
  let [g. D1 ..] = ceq [g. F1 ..] in 
  [g. ae_ta (D1 ..) (Q2 ..)]


;


