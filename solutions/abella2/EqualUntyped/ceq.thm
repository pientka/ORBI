Specification "ceq".
Import "EqualUntyped".

% completeness of algo equa RELATIONAL
%% this inherits from the fine-grained version
%% with demotion

%% Equivalence properties lifted from EqualUntyped.

Define xadR :  olist -> olist -> olist -> prop by
  xadR nil nil nil ;
  nabla t, xadR (is_tm t :: Is) (aeq t t :: As) (deq t t :: is_tm t ::  Ds) 
  	   := xadR Is As Ds.


Theorem member_deq : forall As Is Ds F,
	xadR Is As Ds -> member F Ds -> exists M, (F = (is_tm M) \/ F = (deq M M)) /\
        member (aeq M M) As /\  member (is_tm M) Is.
induction on 1. intros. case H1.
case H2.
case H2. search.
case H4.search.
 apply IH to H3 H5. search.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Lifting equivalence relation to larger ctx
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem xadR_xaR:  forall   As Is Ds, xadR Is As Ds -> xaR Is As.
induction on 1. intros. case H1.
	  search.
  apply IH to H2.search.

Theorem transG_largest : forall As Is Ds M1 M2 M3,
  xadR Is As Ds -> {As |- aeq M1 M2} -> {As |- aeq M2 M3} -> {As |- aeq M1 M3}.
intros.
apply xadR_xaR to H1.
backchain transG_lift.


Theorem symG_largest : forall As Is Ds M1 M2,
  xadR Is As Ds -> {As |- aeq M1 M2} -> {As |- aeq M2 M1}.
intros.
apply xadR_xaR to H1.
backchain symG_lift.


% the crucial strengthening lemma
Theorem demotion : forall As Is Ds M,
  xadR Is As Ds -> {Ds |- is_tm M} -> {Is |- is_tm M}.
induction on 2. intros. case H2.
  % Case app
  apply IH to H1 H3. apply IH to H1 H4. search.
  % Case abs
  monotone H3 with (deq n1 n1 :: is_tm n1 :: Ds). clear  H3.
    apply IH to _ H4. search.
  % Case context
apply member_deq to _ _. case H5.
    case H3. search.
    case H3.
  

Theorem reflR_largest : forall As Is Ds M,
  xadR Is As Ds -> {Ds |- is_tm M} -> {As |- aeq M M}.
intros.
apply demotion to _ _.
apply xadR_xaR to _.
backchain reflR.



%%%%%%%% COMPLETENESS of deq wrt aeq %%%%%%%%%%%%%%%

Theorem completeness : forall As Is Ds M1 M2,
  xadR Is As Ds -> {Ds |- deq M1 M2} -> {As |- aeq M1 M2}. 
induction on 2. intros.case H2.
% app 
apply IH to H1 H3.apply IH to H1 H4.search.
% lam
apply IH to _ H3.search.
% refl 
%apply Ds_subs_Is to H1 H3.
backchain reflR_largest.
% trans
apply IH to H1 H4.apply IH to H1 H3.
backchain transG_largest.
%sym 
apply IH to H1 H3.
backchain symG_largest.
% ctx
apply member_deq to _ _.
      case H5.
      	   case H4.case H3.case H3.case H3.search.

