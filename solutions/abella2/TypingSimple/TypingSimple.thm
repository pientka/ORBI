%% Type uniqueness for the simply-typed lambda-calculus

Specification "TypingSimple".


Define name : tm -> prop by
  nabla x, name x.

Theorem member_prune : forall G E, nabla (n:tm),
 member (E n) G -> (exists E', E = x\E').
induction on 1. intros. case H1.
 search.
 apply IH to H2. search.

Close tm, tp.

Define xtG : olist -> prop by
  xtG nil ;
  nabla x, xtG (oft x T :: Os) := xtG Os.    

Theorem xtG_uniq : forall Os E T1 T2,
 xtG Os -> member (oft E T1) Os -> member (oft E T2) Os -> T1 = T2.
induction on 1. intros. case H1.
%nil
 case H2.
%cons
 case H2.
   	case H3. search.   
                apply member_prune to H5. 
 case H3.
    apply member_prune to H5.
    apply IH to H4 H5 H6. search.

% induction on ctx
Theorem member_oft:
   forall Os E,   xtG Os -> member E Os ->
        exists N X, E = oft X N /\ name X.
induction on 1. intros. case H1.
  case H2.
  case H2. search.
    apply IH to H3 H4. search.


Theorem tyUniq : forall Os E T1 T2,
 xtG Os -> {Os |- oft E T1} -> {Os |- oft E T2} -> T1 = T2.
induction on 2. intros. case H2.
%lam
 case H3.
   apply IH to _ H4 H5. search.
   apply member_oft to H1 H6. case H7. case H5.
%app
 case H3.
   apply IH to H1 H4 H6. search.
   apply member_oft to H1 H7. case H6. case H8.
% var
 apply member_oft to H1 H5. case H4. case H6.
   case H3. apply member_oft to H1 H8. case H7.
   apply xtG_uniq to H1 H5 H8. search.

Theorem type_uniq : forall E T1 T2,
 {oft E T1} -> {oft E T2} -> T1 = T2.
 intros. backchain tyUniq.
