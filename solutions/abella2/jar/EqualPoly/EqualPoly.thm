%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Reflexivity of poly algo equality 
%% v R abella  2.0.1-dev
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Specification "EqualPoly".

Close tm, tp.

Define aeqR :  olist -> olist  -> prop by
  aeqR  nil nil ;
  nabla x, aeqR (is_tm x :: Is) (aeq x x :: As)  
  	   := aeqR Is As;
  nabla t, aeqR (is_tp t :: Is) (atp t t :: As)  
  	   := aeqR Is As.

Theorem member_aeq : forall As Is F, 
aeqR Is As  -> member F Is -> 
  (exists M , F = (is_tm M) /\ {As |- aeq M M}) \/ 
   exists T, F = (is_tp T) /\ {As |- atp T T}.  
induction on 2.intros. case H1.
% nil
 case H2.
% cns	  
 case H2. search.
 apply IH to H3 H4.case H5.search.search.
% third clause
 case H2.search.
  apply IH to H3 H4.case H5.search.search.
% qed

Theorem reflTpR :  (forall As Is  T,
  aeqR Is As  -> {Is |- is_tp T} -> {As |- atp T T}).
induction on 2.
intros. case H2.
%ar
apply IH to H1 H3.apply IH to H1 H4.search.
% all
 apply IH to _ H3. search.
% ctx
 apply member_aeq to _ _.case H5.
       case H3.
       case H3.search.

Theorem reflTmR : (forall As Is  E,
  aeqR Is As  -> {Is |- is_tm E} -> {As |- aeq E E}).
induction on 2.
intros. case H2.
% app case
 apply IH to H1 H4. apply IH to H1 H3. search.
%lam
 apply IH to _ H3. search.
%tlam
 apply IH to _ H3. search.
% tapp
apply IH to H1 H3.
apply reflTpR to H1 H4.search.
% ctx
 apply member_aeq to _ _.case H5.
       case H3.search.
       case H3.
% qed

%% END %%%
