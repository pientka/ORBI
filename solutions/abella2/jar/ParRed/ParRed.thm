% type preservation  for parallel reduction 

Specification "ParRed".
Define name : tm -> prop by
  nabla x, name x.

Define xrtR : olist -> olist -> prop by
  xrtR nil nil;
  nabla n, xrtR (pr n n :: L1) (oft n T :: L2) := xrtR L1 L2.


Theorem member_oft : forall L1 L2 F,
 xrtR L1 L2 -> member F L2 -> exists E T, F = (oft E T) /\ name E.
induction on 1. intros. case H1.
 case H2.
 case H2.
   search.
   apply IH to H3 H4. search.

% for pr I do not need to know it's a name.
Theorem member_pr : forall K L F , xrtR  K L -> member F K -> exists A B, F = (pr A B) /\ A = B.
induction on 2. intros. case H2.
  case H1. search.
  case H1. apply IH to H4 H3. search.


Theorem typePresR :
  forall E1 E2 T Ps Os, xrtR Ps Os -> 
  {Ps |- pr E1 E2} -> {Os |- oft E1 T} -> {Os |- oft E2 T}.
induction on 2. intros. case H2.
%app
  case H3.
   apply IH to H1 H4 H6.  apply IH to H1 H5 H7.  search.
% imp app
  apply member_oft to H1 H7.case H8.case H6.
% lam
 case H3.
  apply IH to _ H4 H5.   search.
% imp case
  apply member_oft to H1 H6.case H7.case H5.
%beta
case H3.
% ind
  apply IH to H1 H5 H7.
  case H6.
         apply IH to _ H4 H9.
	   inst H10 with n1 = S2. cut H11 with H8.search.
% imp
       apply member_oft to H1 H10.case H9. case H11.
%imp case
  apply member_oft to H1 H7.case H8.case H6.
%xrtR
apply member_pr to H1 H5.case H4.search.

