%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Reflexivity of algo equality with ctx relations
%% adequacy, sym and trans and subst
%% FINE GRAINED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Specification "EqualUntyped".

Define name : tm -> prop by
  nabla x, name x.

Define xaG :   olist  -> prop by
  xaG  nil  ;
  nabla t, xaG  (aeq t t :: As)  
  	   := xaG  As.

% sym/trans

Theorem member_aeq_name : forall  F As,
  xaG  As  ->  member F As -> exists M1 M2, 
      F = (aeq M1 M2) /\ name M1 /\  M1 = M2.
induction on 1. intros. case H1.
  case H2.
  case H2. search.
  apply IH to H3 H4.search.

Theorem symG : forall As  T1 T2,
  xaG  As  -> {As |- aeq T1 T2} -> {As |- aeq T2 T1}.
induction on 2. intros. case H2.
%app
apply IH to H1 H3.apply IH to H1 H4.search.
% lam
 apply IH to _ H3. search.
% ctx 
 apply member_aeq_name to H1 _.case H3. % just using T1 = T2
 search.

Theorem transG : forall As   T1 T2 T3,
  xaG  As  -> {As |- aeq T1 T2} -> {As |- aeq T2 T3} -> {As |- aeq T1 T3}.
induction on 2. intros. case H2. 
% app
case H3.
apply IH to H1 H4 H6.
apply IH to H1 H5 H7.search.
% impossible ctx cases
  apply member_aeq_name to H1 _.case H6.
case H8. % using name, but I could just search, as below

% lam
case H3.
 apply IH to _ H4 H5. search.
 apply member_aeq_name to H1 H6.case H5.case H7.  % 

% ctx
apply member_aeq_name to H1 H5. case H4. % just using T1 = T2
search.
% qed

%%%% subs property for aeq
%%% to illustrate exchange

Theorem  substG: forall A1 A2 B1 B2  K , nabla x,
  xaG  K  -> {K, aeq x x |- aeq (A1 x) (A2 x)} -> {K |- aeq B1 B2} ->
         {K |- aeq (A1 B1) (A2 B2)}.
induction on 2. intros. case H2.
  apply IH to H1 H4 H3. apply IH to H1 H5 H3. search.
% exch for free
  apply IH to _ H4 H3. search.
% ctx
case H5.
% (aeq (A1 n1) (A2 n1)) is (aeq n1 n1) 
case H4.    search.
% member (aeq (A1 n1) (A2 n1)) K
    apply member_aeq_name to H1 H6. case H7.
% member (aeq n2 n2) (K n2)
%  ============================
%   {K n2 |-  aeq (A1 n2 (B1 n2)) (A2 n2 (B2 n2))}
case H4.      search.
% member (aeq n1 n1) K
%  ============================
%   {K |- aeq B1 B2}
case H4.      search.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% now reflexivity requires a larger context ....

Define xaR :  olist -> olist  -> prop by
  xaR  nil nil ;
  nabla t, xaR (is_tm t :: Is) (aeq t t :: As)  
  	   := xaR Is As.

% standadized
Theorem member_refl : forall As Is  F, 
xaR Is As  -> member F Is -> exists M, F = (is_tm M) /\ member (aeq M M) As.  
induction on 2.intros. case H1.
% nil
 case H2.
% cns	  
 case H2. search.
 apply IH to H3 H4.search.
% qed

Theorem reflR : forall As Is  M,
  xaR Is As  -> {Is |- is_tm M} -> {As |- aeq M M}.
induction on 2. intros. case H2.
% app case
 apply IH to H1 H4. apply IH to H1 H3. search.
% lam case
 apply IH to _ H3. search.
% ctx
apply member_refl to H1 H4. case H3.search.
% qed


% ... which imples the smaller
Theorem xaR_xaG:  forall   As Is , xaR Is As  -> xaG  As.
induction on 1. intros. case H1.
	  search.
  apply IH to H2.search.

% the other way around is false!!!  as I know nothing about Is :  xaR Is nil
% Theorem iCtx_xaR:  forall   As Is , xaG  As  -> xaR Is As.



%% LIFTING to xaR
Theorem transG_lift : forall As Is  M1 M2 M3,
  xaR Is As  -> {As |- aeq M1 M2} -> {As |- aeq M2 M3} -> {As |- aeq M1 M3}.
intros.
apply xaR_xaG to H1.
backchain transG.


Theorem symG_lift : forall As Is  M1 M2,
  xaR Is As  -> {As |- aeq M1 M2} -> {As |- aeq M2 M1}.
intros.
apply xaR_xaG to H1.
backchain symG.


%adequacy: not in the orbi spec

%% a stronger other direction member lemma (same proof)

Theorem member_aeq_shape : forall As Is F, 
xaR Is As  -> member F As  
   -> exists M1 M2, F = (aeq M1 M2) /\ M1 = M2 /\  member (is_tm M2) Is.
induction on 2.intros. case H1.
% nil
 case H2.
% cns	  
 case H2. search.
 apply IH to H3 H4.search.
% qed


Theorem aeq_adeq : forall As Is  M1 M2 ,
  xaR Is As  -> {As |- aeq M1 M2} -> {Is |- is_tm M1} /\ {Is |- is_tm M2}.
induction on 2. intros. case H2. 
% app
apply IH to H1 H4.apply IH to H1 H3.      search.
% lam
apply IH to _ H3.search.
% ctx
 apply member_aeq_shape to H1 _.case H3. search. %  using M1 = M2 and member
