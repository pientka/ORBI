% Definition of types and expressions
tp: type.  %name tp T.
arr: tp -> tp -> tp.
nat: tp.

tm: type. %name tm E.
lam : tp -> (tm -> tm) -> tm.
app : tm -> tm -> tm.

% Typing judgment
oft: tm -> tp -> type. %name oft H.

of_lam: ({x:tm}oft x T1 -> oft (E x) T2)
	-> oft (lam T1 E) (arr T1 T2).
	  
of_app: oft E1 (arr T2 T) -> oft E2 T2
       -> oft (app E1 E2) T.


% Equality predicate defined by reflexivity
eq: tp -> tp -> type.
e_ref: eq T T.


% -------------------------------------------------------------------
% Inversion lemmas about function types

arr_inv1 :  eq (arr T1 T2) (arr T1' T2') -> eq T2 T2' -> type.
arr_inv1_ref : arr_inv1 e_ref e_ref.
%mode arr_inv1 +E1 -E2.
%worlds () (arr_inv1 E1 E2).
%total E1 (arr_inv1 E1 _).

arr_inv2 : {T}eq T2 T2' -> eq (arr T T2) (arr T T2') -> type.
arr_inv2_ref : arr_inv2 T  e_ref e_ref.
%mode arr_inv2 +T +E1 -E2.
%worlds () (arr_inv2 T E1 E2).
%total E1 (arr_inv2 _ E1 _).


% -------------------------------------------------------------------
% VERSION 1: general case to also cover the base case

unique : oft E T -> oft E T' -> eq T T' -> type.
unique_app : unique (of_app D1 D2) (of_app F1 F2) EQ'
	   <- unique D1 F1 EQ
            <- arr_inv1 EQ EQ'.
unique_lam : unique (of_lam [x] [u] D x u) (of_lam [x] [u] F x u) EQ'
            <- ({x:tm}{u: oft x T1}  unique (D x u) (F x u) EQ)              
             <- arr_inv2 T1  EQ EQ'.

unique_base : unique D D e_ref. % General case to also cover the base case

%mode unique +D +F -E.
%block tctx : some {t:tp} block {x:tm} {d: oft x t}.
%worlds (tctx) (unique D F E).
%total D (unique D _ _).

% -------------------------------------------------------------------
% VERSION 2: base cases individually handled when they arise

unique : oft E T -> oft E T' -> eq T T' -> type.
unique_app : unique (of_app D1 D2) (of_app F1 F2) EQ'
            <- unique D1 F1 EQ
            <- arr_inv1 EQ EQ'.
unique_lam : unique (of_lam [x] [u] D x u) (of_lam [x] [u] F x u) EQ'
            <- ({x:tm}{u: oft x T1} unique u u e_ref -> unique (D x u) (F x u) EQ)               
            <- arr_inv2 T1  EQ EQ'.


%block xtG_u : some {t:tp} block {x:tm} {d: oft x t} {u:unique d d e_ref}.
%mode unique +D +F -E.
%worlds (xtG_u) (unique D F E).
%total D (unique D _ _).

