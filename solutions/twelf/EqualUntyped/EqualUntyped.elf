% Definition of lambda-calculus
% Author: Brigitte Pientka
%{
  Generalized context verion (G version):

 * Admissibility of Reflexivity, Symmetry, Transitivity for alg. equality
 * Correctness of algorithmic equality with respect to declaritive
      equality.
 * Pairwise substitution lemma for alg. equality

}%


tm: type.
lam: (tm -> tm) -> tm.
app: tm -> tm -> tm.

% ------------------------------------------------------------------------------
deq: tm -> tm -> type.
de_l: deq (lam T) (lam T')
      <- ({x}deq x x -> deq (T x) (T' x)).

de_a: deq (app T1 T2) (app E1 E2)
       <- deq T1 E1
       <- deq T2 E2.

% Reflexivity
de_r: deq T T.

% Symmetry 
de_s: deq S T 
       <- deq T S.

% Transitivity
de_t: deq T S
       <- deq T T'
       <- deq T' S.

% ------------------------------------------------------------------------------
aeq: tm -> tm -> type.

ae_l: aeq (lam T) (lam T')
       <- ({x}aeq x x -> aeq (T x) (T' x)).

ae_a: aeq (app T1 T2) (app E1 E2)
       <- aeq T1 E1
       <- aeq T2 E2.

% ------------------------------------------------------------------------------
% Reflexivity is admissible in aeq.
reflG: {T}aeq T T -> type.
%mode reflG +T -D.
r_l: reflG (lam T) (ae_l D)
      <- ({x}{u:aeq x x}reflG x u -> reflG (T x) (D x u)).

r_a: reflG (app T1 T2) (ae_a D2 D1)
      <- reflG T1 D1
      <- reflG T2 D2.

%block xaG_r : block {x:tm}{u:aeq x x}{r_x: reflG x u}.
%worlds (xaG_r) (reflG T D).
%covers reflG +T -D.
%terminates T (reflG T D).
%total T (reflG T D).

% ------------------------------------------------------------------------------
% Transitivity is admissible
transG: aeq T R -> aeq R S -> aeq T S -> type.
%mode transG +E1 +E2 -E3.

tr_l: transG (ae_l E1) (ae_l E2) (ae_l E3)
       <- ({x}{u:aeq x x}{r_x: reflG x u}
	     transG u u u -> transG (E1 x u) (E2 x u) (E3 x u)).

tr_a: transG (ae_a E2 E1) (ae_a F2 F1) (ae_a G2 G1)
       <- transG E1 F1 G1
       <- transG E2 F2 G2.

% NOTE: our base case here is more specific that the on-paper proof. 
% it can be generalized to: some {S:tm} block {x:tm}{u:aeq x x}{r_x:reflG x u}{d:aeq x S}{t_x: transG u d d}.
%block xaG_t : block {x:tm}{u:aeq x x}{r_x:reflG x u}{t_x: transG u u u}.
%worlds (xaG_t) (transG E1 E2 E3).
%covers transG +E1 +E2 -E3.
%terminates E1 (transG E1 E2 E3).
%total E1  (transG E1 E2 E3).


% ------------------------------------------------------------------------------
% Transitivity is admissible
symG: aeq T R -> aeq R T -> type.
%mode symG +E1 -E2.

sy_l: symG (ae_l E1) (ae_l E2) 
       <- ({x}{u:aeq x x}{r_x: reflG x u}{t_x: transG u u u}
	 symG u u ->  symG (E1 x u) (E2 x u)).

sy_a: symG (ae_a E2 E1) (ae_a F2 F1) 
       <- symG E1 F1
       <- symG E2 F2.

%block ls : block {x:tm}{u:aeq x x}{r_x:reflG x u}{t_x: transG u u u}{s_x: symG u u}.
%worlds (ls) (symG E1 E2).
%covers symG +E1 -E3.
%terminates E1 (symG E1 E2).
%total E1  (symG E1 E2).
% ------------------------------------------------------------------------------
% Correctness:
ceq: deq T S -> aeq T S -> type.
%mode ceq +E -D.
c_l: ceq (de_l E) (ae_l D)
      <- ({x}{u:aeq x x} {r_x: reflG x u}{t_x: transG u u u}{s_x: symG u u}{v:deq x x}
	    ceq v u -> 
           ceq (E x v) (D x u)).

c_a: ceq (de_a F2 F1) (ae_a D2 D1)
      <- ceq F1 D1
      <- ceq F2 D2.

c_r: ceq de_r E
      <- reflG _ E.

c_t: ceq (de_t D2 D1) E
      <- ceq D2 E2
      <- ceq D1 E1
      <- transG E1 E2 E.

c_s: ceq (de_s D) E
      <- ceq D E1
      <- symG E1 E.



% ORDER within blocks MATTERS
% If we write {x:tm}{v:deq x x}{u:aeq x x}{r_x:reflG x u}{t_x: transG u u u}...
% we get world subsumption failure!
%block daG_rtsc : block {x:tm}{u:aeq x x}{r_x:reflG x u}{t_x: transG u u u}{s_x: symG u u}
	     {v:deq x x}{c_x: ceq v u} .
%worlds (daG_rtsc) (ceq E D).
%covers ceq +E -D.
%terminates E (ceq E D).
%total E (ceq E D).

% ------------------------------------------------------------------------------
% Soundness:

seq: aeq T S -> deq T S -> type.
%mode seq +E -D.
s_l: seq (ae_l D) (de_l E)
      <- ({x}{u:aeq x x}{v:deq x x} 
	  seq  u de_r -> seq  (D x u) (E x v)).

s_a: seq (ae_a D2 D1) (de_a F2 F1)
      <- seq D1 F1
      <- seq D2 F2.


% ORDER within blocks MATTERS
% If we write {x:tm}{v:deq x x}{u:aeq x x}{r_x:reflG x u}{t_x: transG u u u}...
% we get world subsumption failure!
%block sl : block {x:tm}{u:aeq x x}{v:deq x x}{u:seq u de_r}.
%worlds (sl) (seq D E).

%covers seq +D -E.
%terminates D (seq D E).
%total D (seq D E).


% ---------------------------------------------------------------------------
% Substitution lemma
subst: ({x:tm}aeq x x -> aeq (M1 x) (M2 x)) -> aeq N1 N2 
      -> aeq (M1 N1) (M2 N2)  -> type.
%mode subst +D +F -E.
s_x: subst ([x][u] u) F F.
s_l: subst ([x][u]  ae_l [y] [v] D x u y v) F (ae_l E )
      <- ({y:tm}{v:aeq y y} 
	    ({N1:tm}{N2:tm}{F:aeq N1 N2}subst ([x][u] v) F v) -> 
	    subst ([x][u] D x u y v) F (E y v) ).

s_a: subst ([x][u] ae_a (D1 x u) (D2 x u)) F (ae_a E1 E2)
      <- subst ([x][u] D1 x u) F E1
      <- subst ([x][u] D2 x u) F E2.


% ---------------------------------------------------------------------------
% Context schemas 
%block xaG_s :  block{y:tm}{ae_v:aeq y y}
		 {s_y:{N1:tm}{N2:tm}{F:aeq N1 N2} subst ([x][u] ae_v) F ae_v}.
%worlds (xaG_s) (subst D F E).
%total D (subst D F E).
